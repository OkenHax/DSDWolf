
//===========================================================================================================================
rotation ROT_SHOW=<0.000000, 0.000000, 0.000000, 1.000000>;
rotation ROT_HIDE=<0.000000, 0.000000, 0.707107, 0.707107>;

integer channel;
integer HUDOpen=TRUE;

string textureOn;
string textureOff;
key texPicker1="bee6ec7e-1a0d-6c26-971b-933c38afcdb9"; //uuid color picker "paw" texture ( loaded from the notecard )
key texPicker2="a1fb9e4c-914a-bca7-db0d-32ff1bbe9c70"; //uuid color picker "line" texture ( loaded from the notecard )
key texSlider; //uuid slider "paw" texture ( loaded from the notecard )

list currentShownButtons; //List of buttons currently Shown [(str)Name; (int)link_number]

list variables;//[(str)name, (str)value)]
list switches; //[(str)name, (str)value)]

list btPushed;//[(int)Link_number, (int)face, (key)texture_disabled]

integer scriptSilent;
string lastLoadVariable;
vector colorPickerValue=<0.5,0.5,1.0>;
vector lastTouchCoord;
//========== Notecard
string NOTECARD="Buttons settings";//Change if you want to change the name of the settings notecard
key kQuery;
integer current_notecard;
integer iLine;
//==================
string SEPARATOR_1="^";
string SEPARATOR_2="~";
string SEPARATOR_3="/";
string SEPARATOR_LIST=",";
//===================
list pickerButtons; //[link_num:button_num ; command]
list pickerButtonsSelected; //[pickerButton_Index]
list currentColorPicker; //[link_num ; picker_type]
vector currentColorPickerColorRGB;
vector currentColorPickerColorHSV;
//===============
integer touching=FALSE;
float clickTime;
//===========================================================================================================================
//===========================================================================================================================
debug(string msg){
    llOwnerSay(llGetScriptName()+" DEBUG: "+msg);
}
 
feedback(string msg){
    llOwnerSay(msg);
}

say(string msg){
    if(!scriptSilent){
        //debug("say=>"+msg);
        llSay(channel, msg);
    }
}

integer stringStartWith(string source, string motif){
    return llGetSubString(source, 0, llStringLength(motif) - 1) == motif;
}

string stringReplace(string str, string search, string replace){
    return llDumpList2String(llParseStringKeepNulls((str = "") + str, [search], []), replace);
}

string stringReplaceAll(string str, list pattern){
    integer i=llGetListLength(pattern);
    while((i-=2)>=0){
        str=stringReplace(str, llList2String(pattern, i), llList2String(pattern, i+1));
    }
    return str;
}


showFreeMemory(){
    integer freemem = llGetFreeMemory();
    if(llToLower( "Ü" ) == "Ü"){
        integer memory = (integer)((float)freemem * 100.0 / 16384.0);
        feedback(llGetScriptName()+": "+(string)memory + "% memory free ("+(string)freemem+" Byte). LSO" );
    }else{
        integer memory = (integer)((float)freemem * 100.0 / 65536.0);
        feedback(llGetScriptName()+": "+(string)memory + "% memory free ("+(string)freemem+" Byte). Mono" );
    }
}

notecardLine(string line){
    list cmds=llParseString2List(line, [SEPARATOR_1], []);
    string cmd=llList2String(cmds, 0);
    list params=llParseString2List(llList2String(cmds, 1), [SEPARATOR_2], []);
    
    if(cmd=="channel"){
        channel=llList2Integer(params, 0);
        
    }else if(cmd=="texturepicker"){
        texPicker1=llList2Key(params, 0);
        texPicker2=llList2Key(params, 1);
        
    }else if(cmd=="textureslider"){
        texSlider=llList2Key(params, 0);
        
    }else if(cmd=="textureon"){
        textureOn=llList2String(params, 0);
        
    }else if(cmd=="textureoff"){
        textureOff=llList2String(params, 0);
        
    }else if(cmd=="sleep"){ //Set default value
        llSleep(llList2Float(params, 0));
    
    }else if(cmd=="default"){ //Set default value
        string name=llList2String(params, 0);
        integer link=findPrim(name);
        if(link!=-1){
            scriptSilent=TRUE;
            integer face=llList2Integer(params, 1);
            string value=llList2String(params, 2);
            list infos=llGetLinkPrimitiveParams(link, [PRIM_DESC, PRIM_TEXTURE, ALL_SIDES]);
            string desc=llList2String(infos, 0);
            string buttonType=llList2String(llParseString2List(desc, [SEPARATOR_1], []), 1);
            
            if((buttonType=="vb") || (buttonType=="sl")){
                buttonClick(name, link, face, desc, llList2List(infos, 1, -1), TRUE);
                
            }else if(buttonType=="sw"){ //switch
                integer index=llListFindList(switches, [name+"."+(string)face]);
                if(index==-1){
                    index=llGetListLength(switches);
                    switches+=[name+"."+(string)face, (value=="TRUE")]; //We put the contrary value cause it gets inverted during click            
                }
                buttonClick(name, link, face, desc, llList2List(infos, 1 ,-1), TRUE);
                            
            }else if(buttonType=="sld"){ //Slider
                buttonMultiClick(name, link, 0, desc, <llList2Float(params, 1), 0.0, 0.0>);
            }
                        
            scriptSilent=FALSE;
        }
    }
}

integer findPrim(string primName){
    integer i=llGetNumberOfPrims();
    while(i>0){
        if(llGetLinkName(i)==primName){
            return i;
        }
        --i;
    }
    return -1;
}
//===========================================================================================================================

exchangeTexture(integer link, integer face, key uuid){
    list tempPrimsParams=llGetLinkPrimitiveParams(link, [PRIM_TEXTURE, face]);
    llSetLinkPrimitiveParamsFast(link, [PRIM_TEXTURE, face, uuid]+llList2List(tempPrimsParams, 1, -1));
}



//===========================================================================================================================
//===========================================================================================================================
integer buttonClick(string name, integer link, integer face, string data, list infos, integer muted){
    list datas=llParseStringKeepNulls(data, [SEPARATOR_1], []);
    string buttonType=llList2String(datas, 1);
        
    datas=llDeleteSubList(datas, 0, 1); //removing the panel ID and button Type to only keep command related infos ( it's usless but just a bit cleaner after )
    
    if(buttonType=="pb"){
        /*list pickerButtons; //[link_num:button_num ; command]
        list pickerButtonsSelected; //[pickerButton_Index]
        list currentColorPicker; //[link_num ; picker_type]*/
        
        
        integer buttonNum=face/2;
        face=(buttonNum)*2;
        
        integer indexPB=llListFindList(pickerButtons, [(string)link+":"+(string)buttonNum]);
        integer indexPBS=llListFindList(pickerButtonsSelected, [indexPB]);
        if(indexPBS==-1){
            if(pickerButtonsSelected==[]){ //Empty list so we load first selected color
                currentColorPickerColorRGB=llList2Vector(llGetLinkPrimitiveParams(link, [PRIM_COLOR, face]), 0);
                loadColorPickers(currentColorPickerColorRGB);
                pickerButtonsSelected+=[indexPB];
            }else{
                pickerButtonsSelected+=[indexPB];
                sendCommandToPickerButtons();
            }
            exchangeTexture(link, face+1, textureOn);
        }else{
            pickerButtonsSelected=llDeleteSubList(pickerButtonsSelected, indexPBS, indexPBS);
            exchangeTexture(link, face+1, textureOff);
        }            
    
    }else if(buttonType=="sw"){ //Switch
        //string param=llList2String(datas, 0);
        string param=llList2String(datas, face);
        if(param!=""){
            integer index=llListFindList(switches, [name+"."+(string)face]);
            if(index==-1){
                index=llGetListLength(switches);
                switches+=[name+"."+(string)face, FALSE];            
            }
            //Get the current button value
            integer value=llList2Integer(switches, index+1);
            switches=llListReplaceList(switches, [value=!value], index+1, index+1); 
            
            datas=llParseString2List(param, [SEPARATOR_3], []);
            string command;
            list primParams;
            if(value){
                command=stringReplace(llList2String(datas, 0), "%v", llList2String(datas, 1));
                //command=stringReplace(llList2String(datas, face), "%v", llList2String(datas, 1));
                primParams=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, face, textureOn]+llList2List(infos, (face*4)+1, (face*4)+3);
            }else{
                command=stringReplace(llList2String(datas, 0), "%v", llList2String(datas, 2));
                //command=stringReplace(llList2String(datas, face), "%v", llList2String(datas, 2));
                primParams=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, face, textureOff]+llList2List(infos, (face*4)+1, (face*4)+3);
            }
            llSetLinkPrimitiveParamsFast(LINK_SET, primParams);
            if(!muted) say(stringReplaceAll(command, variables));
        }        
    
    }else if(buttonType=="sl"){ //Selector         
        list linkedButtons=llParseString2List(llList2String(datas, 0), [SEPARATOR_3], []);
        string command=llList2String(datas, 1);
        datas=llDeleteSubList(datas, 0, 1);
        string param=llList2String(datas, face);
        
        if(param!=""){ //Ignore faces without commands       
            list primParams;             
            
            //Disable all linked buttons to disabled
            //[list_linked_buttons;command;[list of params]]
            integer i=llGetListLength(linkedButtons);
            while(--i>=0){
                integer index=llListFindList(currentShownButtons, [llList2String(linkedButtons, i)]);
                if(index!=-1){
                    list linkedInfos=llGetLinkPrimitiveParams(llList2Integer(currentShownButtons, index+1), [PRIM_TEXTURE, ALL_SIDES]);
                    integer j=llGetLinkNumberOfSides(llList2Integer(currentShownButtons, index+1));
                    while(--j>=0){
                        primParams+=[PRIM_LINK_TARGET, llList2Integer(currentShownButtons, index+1), PRIM_TEXTURE, j, textureOff]+llList2List(linkedInfos, (j*4)+1, (j*4)+3);
                    }
                }
            }
            
            //Changing selected button
            i=llGetLinkNumberOfSides(link);
            while(--i>=0){
                primParams+=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, i, textureOff]+llList2List(infos, (i*4)+1, (i*4)+3);
            }   
            primParams+=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, face, textureOn]+llList2List(infos, (face*4)+1, (face*4)+3);
            llSetLinkPrimitiveParamsFast(LINK_SET, primParams);
            
            lastLoadVariable=(string)((integer)llFrand(100000.0));
            command=stringReplace(command, "%ld", lastLoadVariable);
            
            command=stringReplace(command, "%v", param);
            if(!muted) say(stringReplaceAll(command, variables));
        } 
    }else if(buttonType=="vb"){ //variable
        list linkedButtons=llParseString2List(llList2String(datas, 0), [SEPARATOR_3], []);
        
        list commands=llParseString2List(llList2String(datas, 1), [SEPARATOR_3], []);
        string variableName=llList2String(commands, 0);
        
        list values=llParseString2List(llList2String(datas, face+2), [SEPARATOR_3], []);
        string variableValue=llList2String(values, 0);
        
        if(variableValue!=""){           
            list primParams;             
        
        
            //Disable all linked buttons to disabled
            //[list_linked_buttons;command;[list of params]]
            integer i=llGetListLength(linkedButtons);
            while(--i>=0){
                integer index=llListFindList(currentShownButtons, [llList2String(linkedButtons, i)]);
                if(index!=-1){
                    list linkedInfos=llGetLinkPrimitiveParams(llList2Integer(currentShownButtons, index+1), [PRIM_TEXTURE, ALL_SIDES]);
                    integer j=llGetLinkNumberOfSides( llList2Integer(currentShownButtons, index+1));
                    while(--j>=0){
                        primParams+=[PRIM_LINK_TARGET,  llList2Integer(currentShownButtons, index+1), PRIM_TEXTURE, j, textureOff]+llList2List(linkedInfos, (j*4)+1, (j*4)+3);
                    } 
                }
            }
            
        
            //Changing selected button
            i=llGetLinkNumberOfSides(link);
            while(--i>=0){
                primParams+=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, i, textureOff]+llList2List(infos, (i*4)+1, (i*4)+3);
            }   
            primParams+=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, face, textureOn]+llList2List(infos, (face*4)+1, (face*4)+3);
            llSetLinkPrimitiveParamsFast(LINK_SET, primParams);
             
            integer index=llListFindList(variables, [variableName]);
            if(index==-1){
                variables+=[variableName, variableValue];
            }else{
                variables=llListReplaceList(variables, [variableName, variableValue], index, index+1);
            }
            llMessageLinked(LINK_THIS, 1, "variable/"+variableName+"/"+variableValue, NULL_KEY);
            
            
            string command=llList2String(commands, 1);
            if(command!=""){
                lastLoadVariable=(string)((integer)llFrand(100000.0));
                command=stringReplace(command, "%ld", lastLoadVariable);
                command=stringReplace(command, "%v", llList2String(values, 1));
                if(!muted) say(stringReplaceAll(command, variables));
            }
        }
    }else if(buttonType=="bt"){ //simple button
        string command=llList2String(datas, 0);
        string param=llList2String(datas, face+1);
        if(param!=""){
            btPushed+=[link, face, textureOff];
            list primParams=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, face, textureOn]+llList2List(infos, (face*4)+1, (face*4)+3);
            llSetLinkPrimitiveParamsFast(LINK_SET, primParams);
            command=stringReplace(command, "%v", param);
            if(!muted) say(stringReplaceAll(command, variables));  
            
            llSetTimerEvent(0.2);
        }
    }else if(buttonType=="cp5"){
        currentColorPickerColorRGB=llList2Vector(llGetLinkPrimitiveParams(link, [PRIM_COLOR, face]), 0);
        loadColorPickers(currentColorPickerColorRGB);
        sendCommandToPickerButtons();
        
    }else if(buttonType=="give"){
        llGiveInventory(llGetOwner(), llList2String(datas, 0));
        
    }else if(buttonType=="lnk"){
        llLoadURL(llGetOwner(), "", llList2String(datas, 0));
        
    }else if(buttonType=="reset"){
        say("all:reset");
        llResetScript();
        
    }else return FALSE;
    return TRUE;
}


integer buttonMultiClick(string name, integer link, integer face, string data, vector coord){
    list datas=llParseStringKeepNulls(data, [SEPARATOR_1], []);
    list buttonTypes=llParseString2List(llList2String(datas, 1), ["/"], []);  
    string buttonType=llList2String(buttonTypes, 0);  
        
    datas=llDeleteSubList(datas, 0, 1); //removing the panel ID and button Type to only keep command related infos ( it's usless but just a bit cleaner after )
    
    if(buttonType=="cp"){//Color picker
        /*up left:    <0.05, 0.95, 0.00000>
        up right:   <0.95, 0.95, 0.00000>
        down left:  <0.05, 0.05, 0.00000>
        down right: <0.95, 0.05, 0.00000>*/
        if(face==0){ //HUE/Sat click
            coord.x=(coord.x*(1+(1-(0.95-0.05))))-0.05;
            coord.y=(coord.y*(1+(1-(0.95-0.05))))-0.05;
            
            if(coord.x>1.0) coord.x=1.0;
            if(coord.x<0.0) coord.x=0.0;
            if(coord.y>1.0) coord.y=1.0;
            if(coord.y<0.0) coord.y=0.0;
            
            
            currentColorPickerColorHSV=<(coord.x*360.0), coord.y, currentColorPickerColorHSV.z>;
        }else if(face==1){ //Value click
            coord.y=(coord.y*(1+(1-(0.95-0.05))))-0.05;
            if(coord.y>1.0) coord.y=1.0;
            if(coord.y<0.0) coord.y=0.0;
        
            currentColorPickerColorHSV=<currentColorPickerColorHSV.x, currentColorPickerColorHSV.y, coord.y>;        
        }
        
        loadColorPickers(HSVtoRGB(currentColorPickerColorHSV));
        sendCommandToPickerButtons();
        
    }else if(buttonType=="cp1"){
        coord.y=(coord.y*(1+(1-(0.95-0.05))))-0.05;
        if(coord.y>1.0) coord.y=1.0;
        if(coord.y<0.0) coord.y=0.0;
        
        if(face==0){ //Red
            currentColorPickerColorRGB.x=coord.y;   
        
        }else if(face==1){ //Green
            currentColorPickerColorRGB.y=coord.y;
        
        }else if(face==2){ //Blue
            currentColorPickerColorRGB.z=coord.y;
        
        }
        loadColorPickers(currentColorPickerColorRGB);
        sendCommandToPickerButtons();

    }else if(buttonType=="sld"){ //Slider
        float min=0.0;
        float max=1.0;
        if(llGetListLength(buttonTypes)==3){
            min=llList2Float(buttonTypes, 1);
            max=llList2Float(buttonTypes, 2);
        }
        
        string command=llList2String(datas, 0);
        list primParams;
        if(face==0){
            coord.x=scaleAndConstraint(coord.x, <-0.1, 1.1, 0.0>, <0.0, 1.0, 0.0>); 
            float textureOffset=scaleAndConstraint(coord.x, <0.00, -0.875, 0.0>, <0.00, -0.875, 0.0>); 
            primParams+=[PRIM_LINK_TARGET, link, PRIM_TEXTURE, 1, texSlider, <1.0, 1.0, 0.0>, <textureOffset, 0.0, 0.0>, 0.0]; //Change the texture coordinates
        
            llSetLinkPrimitiveParamsFast(LINK_SET, primParams); 
            command=stringReplace(command, "%v", (string)scaleAndConstraint(coord.x, <min, max, 0.0>, <0.0, 1.0, 0.0>));
            say(stringReplaceAll(command, variables));
        }
    }else return FALSE;
    return TRUE;
}

integer buttonLongClick(string name, integer link, integer face, string data, vector coord){
    
    list datas=llParseStringKeepNulls(data, [SEPARATOR_1], []);
    string buttonType=llList2String(datas, 1);      
    if(buttonType=="cp5"){
        llSetLinkPrimitiveParamsFast(link, [PRIM_COLOR, face, currentColorPickerColorRGB, 1.0]);
        
    }else if(buttonType=="gload"){ //We'll actually save
        say("custom:save;save:"+(string)face);

    }else return FALSE;
    return TRUE; 
}

//===========================================================================================================================
//===========================================================================================================================

sendCommandToPickerButtons(){
    /*list pickerButtons; //[link_num:button_num ; command]
    list pickerButtonsSelected; //[pickerButton_Index]
    list currentColorPicker; //[link_num ; picker_type]*/
    
    //Send commands for each selected button
    integer i=0;
    while(i<llGetListLength(pickerButtonsSelected)){
        integer buttonIndex=llList2Integer(pickerButtonsSelected, i);
        
        string name=llList2String(pickerButtons, buttonIndex);
        
        list prim=llParseString2List(name, [":"], []);
        integer link=llList2Integer(prim, 0);
        integer buttonNum=llList2Integer(prim, 1);
        
        llSetLinkPrimitiveParamsFast(link, [PRIM_COLOR, (buttonNum*2), currentColorPickerColorRGB, 1.0]);        
        ///==============================================================
          
        say(stringReplaceAll(llList2String(pickerButtons, buttonIndex+1), ["%pk", currentColorPickerColorRGB]+variables));
        i+=1;         
    }
}
 
loadColorPickers(vector color){
    currentColorPickerColorRGB=color;
    integer i=llGetListLength(currentColorPicker);
    while((i-=2)>=0){
        currentColorPickerColorHSV=RGBtoHSV(color);
            
        integer link=llList2Integer(currentColorPicker, i);
        string type=llList2String(currentColorPicker, i+1);
        if(type=="cp"){
            /*x min=-0.027   x max=-0.923
              y min=0.015    y max=0.915*/
            
            vector texCoord=<currentColorPickerColorHSV.x/360.0, currentColorPickerColorHSV.y, currentColorPickerColorHSV.z>;
            texCoord.x=scaleAndConstraint(texCoord.x, <-0.027, -0.923, 0.0>, <-0.027, -0.923, 0.0>);
            texCoord.y=scaleAndConstraint(texCoord.y, < 0.915, 0.015, 0.0>, <0.015,  0.915, 1.0>); 
            
            llSetLinkPrimitiveParamsFast(link, [PRIM_TEXTURE, 0, texPicker1, <1.0,1.0,0.0>, texCoord, 0.0]);

            texCoord.z=scaleAndConstraint(texCoord.z, <0.930, 0.0, 0.0>, <0.0, 0.930, 0.0>);            
            llSetLinkPrimitiveParamsFast(link, [PRIM_TEXTURE, 1, texPicker2, <1.0,1.0,0.0>, <0.0, texCoord.z, 0>, 0.0]); 

            llSetLinkPrimitiveParamsFast(link, [PRIM_COLOR, 2, <currentColorPickerColorHSV.z, currentColorPickerColorHSV.z, currentColorPickerColorHSV.z>, 1.0,
                                                PRIM_COLOR, 3, HSVtoRGB(<currentColorPickerColorHSV.x, currentColorPickerColorHSV.y, 1.0>), 1.0]);
            
        }else if(type=="cp1"){
            vector texCoord=currentColorPickerColorRGB;
            texCoord.x=scaleAndConstraint(texCoord.x, <0.930, 0.0, 0.0>, <0.0, 0.930, 0.0>);     
            texCoord.y=scaleAndConstraint(texCoord.y, <0.930, 0.0, 0.0>, <0.0, 0.930, 0.0>);     
            texCoord.z=scaleAndConstraint(texCoord.z, <0.930, 0.0, 0.0>, <0.0, 0.930, 0.0>);               
            
            llSetLinkPrimitiveParamsFast(link, [PRIM_TEXTURE, 0, texPicker2, <1.0,1.0,0.0>, <0.0, texCoord.x, 0>, 0.0,
                                                PRIM_TEXTURE, 1, texPicker2, <1.0,1.0,0.0>, <0.0, texCoord.y, 0>, 0.0,
                                                PRIM_TEXTURE, 2, texPicker2, <1.0,1.0,0.0>, <0.0, texCoord.z, 0>, 0.0]);
             
        }     
    }   
    
    
}

loadSetting(string data){
    list l=llParseString2List(data, [";", "="], []);
    integer i=llGetListLength(l);
    while((i-=2)>=0){
        string name=llList2String(l, i);
        string value=llList2String(l, i+1);
        //list currentShownButtons; //List of buttons currently Shown [(str)Name; (int)link_number])     
        integer j=llGetListLength(currentShownButtons);
        while((j-=2)>=0){
            list temp=llDeleteSubList(llParseStringKeepNulls(llList2String(currentShownButtons, j), [SEPARATOR_1], []), 0, 0);
            integer index=llListFindList(temp, [name]);
            if(index!=-1){
                list currentPrimParams=llGetLinkPrimitiveParams(llList2Integer(currentShownButtons, j+1), [PRIM_DESC, PRIM_TEXTURE, ALL_SIDES]);
                list datas=llParseStringKeepNulls(llList2String(currentPrimParams, 0), [SEPARATOR_1], []);
                string buttonType=llList2String(datas, 1);
                
                if(buttonType=="sld"){
                    if(value=="-1") value=(string)0.5; 
                    float textureOffset=scaleAndConstraint((float)value, <0.00, -0.875, 0.0>, <0.00, -0.875, 0.0>);        
                    llSetLinkPrimitiveParamsFast(llList2Integer(currentShownButtons, j+1), [PRIM_TEXTURE, 1, texSlider, <1.0, 1.0, 0.0>, <textureOffset, 0.0, 0.0>, 0.0]); 
                    
                }else if(buttonType=="sl"){
                    integer buttonIndex=llListFindList(llDeleteSubList(datas, 0, 3), [value]);
                    if(buttonIndex!=-1){
                        buttonClick(llList2String(currentShownButtons, j), llList2Integer(currentShownButtons, j+1), buttonIndex, llList2String(currentPrimParams, 0), llList2List(currentPrimParams, 1, -1), TRUE);
                    }
                }else if(buttonType=="sw"){
                    list parsedDesc=llParseString2List(llList2String(datas, index+2), ["/"], []);
                        
                    integer buttonState=llListFindList(llDeleteSubList(parsedDesc, 0, 0), [value]);
                    
                    if(buttonState!=-1){
                        currentPrimParams=llDeleteSubList(currentPrimParams, 0, 0);
                        integer indexSwitch=llListFindList(switches, [llList2String(currentShownButtons, j)+"."+(string)index]);
                        if(buttonState==0){
                            switches=llListReplaceList(switches, [TRUE], indexSwitch+1, indexSwitch+1); 
                            llSetLinkPrimitiveParamsFast(llList2Integer(currentShownButtons, j+1), [PRIM_TEXTURE, index, textureOn]+llList2List(currentPrimParams, (index*4)+1, (index*4)+3));
                        }else{
                            switches=llListReplaceList(switches, [FALSE], indexSwitch+1, indexSwitch+1); 
                            llSetLinkPrimitiveParamsFast(llList2Integer(currentShownButtons, j+1), [PRIM_TEXTURE, index, textureOff]+llList2List(currentPrimParams, (index*4)+1, (index*4)+3));
                        }
                    }
                }else if(buttonType=="pb"){
                    integer indexPB=llListFindList(pickerButtons, [llList2String(currentShownButtons, j+1)+":"+(string)index]);
                    integer indexPBS=llListFindList(pickerButtonsSelected, [indexPB]);
                    if(indexPBS!=-1){
                        currentPrimParams=llDeleteSubList(currentPrimParams, 0, 0);
                        llSetLinkPrimitiveParamsFast(llList2Integer(currentShownButtons, j+1), [PRIM_TEXTURE, index*2, textureOff]+llList2List(currentPrimParams, (index*4)+1, (index*4)+3));
                        
                        pickerButtonsSelected=llDeleteSubList(pickerButtonsSelected, indexPBS, indexPBS);
                    } 
                    llSetLinkColor(llList2Integer(currentShownButtons, j+1), (vector)value, index*2);  
                }
                
                j=-1;              
            }
        } 
    }
}
//====================================================================================
float scaleAndConstraint(float value, vector scale, vector constraint){
    //value must be between 0 and 1
    value=(value*(scale.y-scale.x))+scale.x;
    
    if(constraint.x<constraint.y){
        if(value<constraint.x) value=constraint.x;
        else if(value>constraint.y) value=constraint.y;
    }else{
        if(value<constraint.y) value=constraint.y;
        else if(value>constraint.x) value=constraint.x;
    }
    
    return value;
}

vector RGBtoHSV( vector rgb ){
    float R = rgb.x;
    if (R<0) R=0;       // catch malformed input
    else if (R>1) R=1;
        
    float G = rgb.y;
    if (G<0) G=0;       // catch malformed input   
    else if (G>1) G=1;
        
    float B = rgb.z;
    if (B<0) B=0;       // catch malformed input
    else if (B>1) B=1;
        
    float min = llListStatistics(LIST_STAT_MIN, [R, G, B]); //MIN of ( R, G, B );
    float max = llListStatistics(LIST_STAT_MAX, [R, G, B]); //MAX of ( R, G, B );
    if( max == 0 ) return <0.0, 0.0, 0.0>;             //H = S = V = 0
 
    float delta = max - min;
    
    float H;
    float S=delta / max;        // S = saturation from 0 to 1
    float V=max;  // V = brightness Value form 0 to 1
 
 
    if ((R==G) && (G==B)) H = 0; // it is a shade of grey, white or black
    else if( R == max )  H = 0 + ( G - B ) / delta;    // between red & yellow
    else if( G == max )  H = 2 + ( B - R ) / delta;    // between yellow & cyan
    else H = 4 + ( R - G ) / delta;    // between cyan & red
 
    H *= 60;                          // H is traditionally a figure between 0 and 360 degrees
    if( H < 0 ) H += 360;
 
    return <H, S, V>;
}

vector HSVtoRGB( vector hsv ){ 
     float H = hsv.x;
     if (H<0.0) H=0;       // catch malformed H input
     else if (H>=360.0) H=0;
     
     float S = hsv.y;
     if (S<0.0) S=0;       // catch malformed S input
     else if (S>1.0) S=1;
     
     float V = hsv.z;
     if (V<0.0) V=0;       // catch malformed V input
     else if (V>1.0) V=1;

    if( S == 0 ) return <V,V,V>;  // achromatic (grey) simply set R,G, & B = Value 
 
    H /= 60;              // Hue factored into range 0 to 5
    integer i = llFloor( H );      // integer floor of Hue
    float f = H - i;            // factorial part of H
 
    float p = V * ( 1 - S );
    float q = V * ( 1 - S * f );
    float t = V * ( 1 - S * ( 1 - f ) ); 
 
    if (i==0){          return <V,t,p>;
    } else if (i==1){   return <q,V,p>;
    } else if (i==2){   return <p,V,t>;
    } else if (i==3){   return <p,q,V>;
    } else if (i==4){   return <t,p,V>;
    } else {            return <V,p,q>;
    }
}
//===========================================================================================================================
//===========================================================================================================================
default
{
    state_entry(){
        kQuery = llGetNotecardLine(NOTECARD, iLine);
    }

    changed(integer change){
        if(change & CHANGED_OWNER) llResetScript();
        if(change & CHANGED_INVENTORY) llResetScript(); 
    }
     
    dataserver(key query_id, string data){
        if(query_id == kQuery){
            if(data == EOF){
                state run;
            }else{
                ++iLine;
                kQuery = llGetNotecardLine(NOTECARD, iLine);

                data=llStringTrim(data, STRING_TRIM);
                if((data!="") && (llGetSubString(data, 0,0)!="#")){
                    notecardLine(data);
                }
            }
        }
    }
}
//===========================================================================================================================
state run
{
    state_entry(){
        scriptSilent=FALSE;
        llListen(channel+1, "", NULL_KEY, "");
        showFreeMemory();
    }

    touch_start(integer index){
        integer num=llDetectedLinkNumber(0);     
        integer face=llDetectedTouchFace(0);     
        string name=llGetLinkName(num); 
        
        if(num!=1){
            touching=TRUE;
            clickTime=llGetTime();
            
            /*list params=llGetLinkPrimitiveParams(num, [PRIM_DESC, PRIM_TEXTURE, ALL_SIDES]);
            string desc=llList2String(params, 0);
            if(desc!=""){
                if(!buttonClick(name, num, face, desc, llList2List(params, 1 ,-1))){ //Most Button types
                    lastTouchCoord=llDetectedTouchST(0);
                    buttonMultiClick(name, num, face, desc, lastTouchCoord); //Color Picker or slider
                }
            }*/
        }
    }
    
    touch(integer index){
        vector touchST=llDetectedTouchST(0);
        
        integer num=llDetectedLinkNumber(0);     
        integer face=llDetectedTouchFace(0); 
        string name=llGetLinkName(num);
        if(num!=1){ //not root prim
            string desc=llList2String(llGetLinkPrimitiveParams(num, [PRIM_DESC]), 0);
            if(desc!=""){
                float t=llGetTime()-clickTime;
                if((touching) && (t>=1.0)){
                    touching=FALSE;
                    if(buttonLongClick(name, num, face, desc, touchST)){
                        return;
                    }   
                }
                
                if(touchST!=lastTouchCoord){
                    lastTouchCoord=touchST;
                    buttonMultiClick(name, num, face, desc, lastTouchCoord); 
                }    
            }
        }
    }

    touch_end(integer index){
        if(touching){
            float t=llGetTime()-clickTime;
            if(t<=1.0){
                touching=FALSE;
                
                integer num=llDetectedLinkNumber(0);
                integer face=llDetectedTouchFace(0); 
                string name=llGetLinkName(num);
                
                if(num!=1){ //We Ignore root clicks
                    list params=llGetLinkPrimitiveParams(num, [PRIM_DESC, PRIM_TEXTURE, ALL_SIDES]);
                    string desc=llList2String(params, 0);
                    if(desc!=""){
                        buttonClick(name, num, face, desc, llList2List(params, 1 ,-1), FALSE); 
                    } 
                }
            }
        }
    }
    
    link_message(integer source, integer num, string str, key id){
        if(num==1){
            list l=llParseString2List(str, ["/"], []);
            string cmd=llList2String(l, 0);
            if(cmd=="resetbuttons"){
                currentShownButtons=[]; //List of buttons currently Shown [(str)Name; (int)link_number]
                pickerButtons=[];
                pickerButtonsSelected=[];
            }else if(cmd=="addbutton"){
                /*
                list pickerButtons; //[link_num:button_num ; command]
                list pickerButtonsSelected; //[pickerButton_Index]
                list currentColorPicker; //[link_num ; picker_type]*/
                
                integer primNum=llList2Integer(l, 2);
                currentShownButtons+=[llList2String(l, 1), primNum];
                list temp=llGetLinkPrimitiveParams(primNum, [PRIM_NAME, PRIM_DESC]);
                
                list parsedDesc=llParseString2List(llList2String(temp, 1), [SEPARATOR_1], []);
                
                
                string type=llList2String(parsedDesc, 1);
                if(type=="pb"){
                    string command=llList2String(parsedDesc, 2);
                    parsedDesc=llDeleteSubList(parsedDesc, 0, 2);
                    temp=llGetLinkPrimitiveParams(primNum, [PRIM_TEXTURE, ALL_SIDES]);
                
                    integer i=llGetLinkNumberOfSides(primNum)-2;
                    while(i>=0){
                        integer face=i+1;
                        llSetLinkPrimitiveParamsFast(primNum, [PRIM_TEXTURE, face, textureOff]+llList2List(temp, (face*4)+1, (face*4)+3));
                        
                        string value=llList2String(parsedDesc, (i/2));
                        string cc=stringReplaceAll(command, ["%v", value]);
                        pickerButtons+=[(string)llList2Integer(l, 2)+":"+(string)(i/2), cc];
                    
                        i-=2;
        
                    }
                }else if((type=="cp") || (type=="cp1")){
                    currentColorPicker+=[llList2Integer(l, 2), type];
                }
            }
        }
    }
    
    changed(integer change){
        if(change&CHANGED_OWNER) llResetScript();
        if(change&CHANGED_LINK) llResetScript();
        if(change&CHANGED_INVENTORY) llResetScript();    
    }
    
    timer(){
        //we remove simple pushed buttons
        llSetTimerEvent(0.0);
        
        list primParams;
        integer i=llGetListLength(btPushed);
        while((i-=3)>=0){
            list l=llGetLinkPrimitiveParams(llList2Integer(btPushed, 0), [PRIM_TEXTURE, llList2Integer(btPushed, 1)]);
            primParams=[PRIM_LINK_TARGET, llList2Integer(btPushed, 0), PRIM_TEXTURE, llList2Integer(btPushed, 1), llList2Key(btPushed, 2)]+llList2List(l, 1, -1); 
        }
        btPushed=[];
        llSetLinkPrimitiveParamsFast(LINK_SET, primParams);
    }

    listen(integer ch, string name, key id, string msg) {
        if(llGetOwnerKey(id) == llGetOwner()){
            list l = llParseString2List(msg, [":"], []);
            if(llList2String(l, 0)=="hud"){
                loadSetting(llList2String(l, 2));
            }
        }
    }
}
